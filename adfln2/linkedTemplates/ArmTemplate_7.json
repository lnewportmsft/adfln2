{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfln2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MovieDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movie_dataflow_source1",
								"type": "DatasetReference"
							},
							"name": "Movies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "movie_dataflow_sink1",
								"type": "DatasetReference"
							},
							"name": "Output"
						}
					],
					"transformations": [
						{
							"name": "MoviesYear"
						}
					],
					"script": "source(output(\n\t\tmovieId as string,\n\t\ttitle as string,\n\t\tgenres as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Movies\nMovies derive(year = toInteger(trim(right(title, 6), '()')),\n\t\ttitle = toString(left(title, length(title)-6))) ~> MoviesYear\nMoviesYear sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> Output"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/STLFED')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "StagingParquet1",
								"type": "DatasetReference"
							},
							"name": "STLPCPI"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlDatabaseDataset_New1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "ConverToInts"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DATE as string,",
						"          STLPCPI_20171116 as string,",
						"          STLPCPI_20181115 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> STLPCPI",
						"STLPCPI derive(DATE = toDate(DATE),",
						"          STLPCPI_20171116 = toInteger(STLPCPI_20171116),",
						"          STLPCPI_20181115 = toInteger(STLPCPI_20181115)) ~> ConverToInts",
						"ConverToInts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SearchLog')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "searchLog1",
								"type": "DatasetReference"
							},
							"name": "searchLog"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlDWTable11_New1",
								"type": "DatasetReference"
							},
							"name": "sinkIntoDW"
						}
					],
					"transformations": [
						{
							"name": "totalDurationByRegion"
						},
						{
							"name": "RenameColumns"
						},
						{
							"name": "DateFilter"
						},
						{
							"name": "ConvertDate"
						},
						{
							"name": "DurationFilter"
						}
					],
					"script": "source(output(\n\t\t{_col0_} as integer,\n\t\t{_col1_} as string,\n\t\t{_col2_} as string,\n\t\t{_col3_} as string,\n\t\t{_col4_} as integer,\n\t\t{_col5_} as string,\n\t\t{_col6_} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> searchLog\nDateFilter aggregate(groupBy(region),\n\ttotalduration = sum(duration)) ~> totalDurationByRegion\nsearchLog select(mapColumn(\n\t\tuserid = {_col0_},\n\t\tstart = {_col1_},\n\t\tregion = {_col2_},\n\t\tquery = {_col3_},\n\t\tduration = {_col4_},\n\t\turls = {_col5_},\n\t\tclickedurls = {_col6_}\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> RenameColumns\nConvertDate filter(newdate > toDate('2012-02-06','yyyy-MM-dd')) ~> DateFilter\nRenameColumns derive(newdate = toDate(left(start,instr(start,' ')-1),'MM/dd/yyyy')) ~> ConvertDate\ntotalDurationByRegion filter(totalduration > 200) ~> DurationFilter\nDurationFilter sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: false,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkIntoDW"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "taxi_trip_data_input1",
								"type": "DatasetReference"
							},
							"name": "TripData"
						},
						{
							"dataset": {
								"referenceName": "taxi_trip_fare_input1",
								"type": "DatasetReference"
							},
							"name": "TripFare"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TaxiDemoVendorStatsSink1",
								"type": "DatasetReference"
							},
							"name": "VendorStatsSink"
						},
						{
							"dataset": {
								"referenceName": "TaxiDemoDayStatsSink1",
								"type": "DatasetReference"
							},
							"name": "DayStatsSink"
						},
						{
							"dataset": {
								"referenceName": "TaxiDemoTotalByPaymentType1",
								"type": "DatasetReference"
							},
							"name": "TotalPaymentByPaymentType"
						}
					],
					"transformations": [
						{
							"name": "JoinMatchedData"
						},
						{
							"name": "AggregateVendorStats"
						},
						{
							"name": "AggregateDayStats"
						},
						{
							"name": "AggregateByPaymentType"
						}
					],
					"script": "source(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\trate_code as string,\n\t\tstore_and_fwd_flag as string,\n\t\tpickup_datetime as string,\n\t\tdropoff_datetime as string,\n\t\tpassenger_count as short,\n\t\ttrip_time_in_secs as long,\n\t\ttrip_distance as double,\n\t\tpickup_longitude as double,\n\t\tpickup_latitude as double,\n\t\tdropoff_longitude as double,\n\t\tdropoff_latitude as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TripData\nsource(output(\n\t\tmedallion as string,\n\t\t{ hack_license} as string,\n\t\t{ vendor_id} as string,\n\t\t{ pickup_datetime} as string,\n\t\t{ payment_type} as string,\n\t\t{ fare_amount} as double,\n\t\t{ surcharge} as double,\n\t\t{ mta_tax} as double,\n\t\t{ tip_amount} as double,\n\t\t{ tolls_amount} as double,\n\t\t{ total_amount} as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TripFare\nTripData, TripFare join(hack_license == { hack_license}\n\t&& TripData@medallion == TripFare@medallion\n\t&& vendor_id == { vendor_id}\n\t&& pickup_datetime == { pickup_datetime},\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMatchedData\nJoinMatchedData aggregate(groupBy(vendor_id),\n\tpassenger_count = round(sum(passenger_count), 2),\n\t\ttrip_time_in_secs = round(sum(trip_time_in_secs)/60, 2),\n\t\ttrip_distance = round(sum(trip_distance), 2),\n\t\tTotalTripFare = round(sum({ total_amount}), 2)) ~> AggregateVendorStats\nJoinMatchedData aggregate(groupBy(DayOfTheWeek = dayOfWeek(toDate(pickup_datetime,'yyyy-mm-dd hh:mm:ss'))),\n\ttrip_distance = round(avg(trip_distance), 2),\n\t\tpassenger_count = round(avg(passenger_count), 2),\n\t\ttrip_time_in_secs = round(avg(trip_time_in_secs)/60, 2),\n\t\taverage_fare = round(avg({ total_amount}), 2)) ~> AggregateDayStats\nTripFare aggregate(groupBy({ payment_type}),\n\teach(match(type=='double'), concat($$, '_total') = round(sum ($$)))) ~> AggregateByPaymentType\nAggregateVendorStats sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> VendorStatsSink\nAggregateDayStats sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> DayStatsSink\nAggregateByPaymentType sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> TotalPaymentByPaymentType"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dedupeProb')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "names1001",
								"type": "DatasetReference"
							},
							"name": "sourceName"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dupefolder1",
								"type": "DatasetReference"
							},
							"name": "sinkDupes"
						},
						{
							"dataset": {
								"referenceName": "dupefolder1",
								"type": "DatasetReference"
							},
							"name": "sinkNoDupes"
						}
					],
					"transformations": [
						{
							"name": "FuzzyMatch"
						},
						{
							"name": "groupSoundex"
						},
						{
							"name": "Orig1"
						},
						{
							"name": "soundexJoin"
						},
						{
							"name": "soundexBranch"
						},
						{
							"name": "groupPhone"
						},
						{
							"name": "phoneBranch"
						},
						{
							"name": "phoneJoin"
						},
						{
							"name": "groupZip"
						},
						{
							"name": "zipBranch"
						},
						{
							"name": "zipJoin"
						},
						{
							"name": "setConstants"
						},
						{
							"name": "matchScore"
						},
						{
							"name": "finalResult"
						},
						{
							"name": "MapNames"
						},
						{
							"name": "CreateFullName"
						},
						{
							"name": "CheckForDupes"
						}
					],
					"script": "source(output(\n\t\t{Emp ID} as integer,\n\t\t{Name Prefix} as string,\n\t\t{First Name} as string,\n\t\t{Middle Initial} as string,\n\t\t{Last Name} as string,\n\t\tGender as string,\n\t\t{E Mail} as string,\n\t\t{Father's Name} as string,\n\t\t{Mother's Name} as string,\n\t\t{Mother's Maiden Name} as string,\n\t\t{Date of Birth} as date,\n\t\t{Time of Birth} as string,\n\t\t{Age in Yrs.} as double,\n\t\t{Weight in Kgs.} as integer,\n\t\t{Date of Joining} as date,\n\t\t{Quarter of Joining} as string,\n\t\t{Half of Joining} as string,\n\t\t{Year of Joining} as short,\n\t\t{Month of Joining} as short,\n\t\t{Month Name of Joining} as string,\n\t\t{Short Month} as string,\n\t\t{Day of Joining} as short,\n\t\t{DOW of Joining} as string,\n\t\t{Short DOW} as string,\n\t\t{Age in Company (Years)} as double,\n\t\tSalary as integer,\n\t\t{Last % Hike} as string,\n\t\tSSN as string,\n\t\t{Phone No. } as string,\n\t\t{Place Name} as string,\n\t\tCounty as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tZip as integer,\n\t\tRegion as string,\n\t\t{User Name} as string,\n\t\tPassword as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sourceName\nMapNames derive(SoundexValue = soundex(fullname)) ~> FuzzyMatch\nOrig1 aggregate(groupBy(SoundexValue),\n\tsoundexmatch = sum(1)) ~> groupSoundex\nFuzzyMatch select(mapColumn(\n\t\tacctnum,\n\t\tfullname,\n\t\tphone,\n\t\tzip,\n\t\tSoundexValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Orig1\ngroupSoundex, soundexBranch join(groupSoundex@SoundexValue == soundexBranch@SoundexValue,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> soundexJoin\nFuzzyMatch select(mapColumn(\n\t\tacctnum,\n\t\tfullname,\n\t\tphone,\n\t\tzip,\n\t\tSoundexValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> soundexBranch\nsoundexJoin aggregate(groupBy(phone,\n\t\tsoundexBranch@SoundexValue),\n\tphonematch = sum(1),\n\t\tacctnum_agg = last(acctnum)) ~> groupPhone\nsoundexJoin select(mapColumn(\n\t\tsoundexmatch,\n\t\tacctnum,\n\t\tfullname,\n\t\tphone,\n\t\tzip,\n\t\tSoundexValue = soundexBranch@SoundexValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> phoneBranch\ngroupPhone, phoneBranch join(acctnum_agg == acctnum,\n\tjoinType:'right',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> phoneJoin\nphoneJoin aggregate(groupBy(zip,\n\t\tphoneBranch@SoundexValue),\n\tzipcount = sum(1),\n\t\tacctnum_agg = last(acctnum_agg)) ~> groupZip\nphoneJoin select(mapColumn(\n\t\tphonematch,\n\t\tsoundexmatch,\n\t\tacctnum,\n\t\tfullname,\n\t\tphone = phoneBranch@phone,\n\t\tzip,\n\t\tSoundexValue = phoneBranch@SoundexValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> zipBranch\ngroupZip, zipBranch join(acctnum_agg == acctnum,\n\tjoinType:'right',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> zipJoin\nzipJoin derive(soundexweight = 50,\n\t\tzipweight = 25,\n\t\tphoneweight = 25,\n\t\tsoundexbool = iif (soundexmatch > 1, 1, 0),\n\t\tzipbool = iif (zipcount > 1, 1, 0),\n\t\tphonebool = iif (phonematch > 1, 1, 0)) ~> setConstants\nsetConstants derive(matchscore = (soundexbool * 50) + (zipbool * 25) + (phonebool * 25)) ~> matchScore\nmatchScore select(mapColumn(\n\t\tphone,\n\t\tacctnum,\n\t\tfullname,\n\t\tzip = zipBranch@zip,\n\t\tmatchscore\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> finalResult\nCreateFullName select(mapColumn(\n\t\tphone = {Phone No. },\n\t\tzip = Zip,\n\t\tfullname,\n\t\tacctnum = {Emp ID}\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> MapNames\nsourceName derive(fullname = {First Name} + ' ' + {Last Name}) ~> CreateFullName\nfinalResult split(matchscore > 50,\n\tdisjoint: false) ~> CheckForDupes@(Duplicates, NotDupe)\nCheckForDupes@Duplicates sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['dupes.csv'],\n\tpartitionBy('hash', 1)) ~> sinkDupes\nCheckForDupes@NotDupe sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['nodupes.csv'],\n\tpartitionBy('hash', 1)) ~> sinkNoDupes"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyAdventureWorksLTSchema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_ttc",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_ttc",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "SalesLT.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "SalesLT.@{item().destination.table}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"translator": {
											"value": "@item().copyActivity.translator",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_ttc",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_ttc",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().destination.table"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Address"
								},
								"destination": {
									"table": "Address"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "AddressID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "AddressID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "AddressLine1",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "AddressLine1",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "AddressLine2",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "AddressLine2",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "City",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "City",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "StateProvince",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "StateProvince",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "CountryRegion",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "CountryRegion",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "PostalCode",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "PostalCode",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "Guid"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "Customer"
								},
								"destination": {
									"table": "Customer"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "PasswordHash",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "PasswordHash",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "PasswordSalt",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "PasswordSalt",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "Guid"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime"
												}
											},
											{
												"source": {
													"name": "LastName",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "LastName",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "Suffix",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Suffix",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "CompanyName",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "CompanyName",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "SalesPerson",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "SalesPerson",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "EmailAddress",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "EmailAddress",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "Phone",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Phone",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "CustomerID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "CustomerID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "NameStyle",
													"type": "Boolean",
													"physicalType": "bit"
												},
												"sink": {
													"name": "NameStyle",
													"type": "Boolean"
												}
											},
											{
												"source": {
													"name": "Title",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Title",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "FirstName",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "FirstName",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "MiddleName",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "MiddleName",
													"type": "String"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "CustomerAddress"
								},
								"destination": {
									"table": "CustomerAddress"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "CustomerID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "CustomerID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "AddressID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "AddressID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "AddressType",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "AddressType",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "Guid"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "Product"
								},
								"destination": {
									"table": "Product"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ProductID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Name",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Name",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "ProductNumber",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "ProductNumber",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "Color",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Color",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "StandardCost",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "StandardCost",
													"type": "Decimal"
												}
											},
											{
												"source": {
													"name": "ListPrice",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "ListPrice",
													"type": "Decimal"
												}
											},
											{
												"source": {
													"name": "DiscontinuedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "DiscontinuedDate",
													"type": "DateTime"
												}
											},
											{
												"source": {
													"name": "ThumbNailPhoto",
													"type": "Byte[]",
													"physicalType": "varbinary"
												},
												"sink": {
													"name": "ThumbNailPhoto",
													"type": "Byte[]"
												}
											},
											{
												"source": {
													"name": "ThumbnailPhotoFileName",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "ThumbnailPhotoFileName",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "Guid"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime"
												}
											},
											{
												"source": {
													"name": "Size",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Size",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "Weight",
													"type": "Decimal",
													"physicalType": "decimal"
												},
												"sink": {
													"name": "Weight",
													"type": "Decimal"
												}
											},
											{
												"source": {
													"name": "ProductCategoryID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductCategoryID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "ProductModelID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductModelID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "SellStartDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "SellStartDate",
													"type": "DateTime"
												}
											},
											{
												"source": {
													"name": "SellEndDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "SellEndDate",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "ProductCategory"
								},
								"destination": {
									"table": "ProductCategory"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ProductCategoryID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductCategoryID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "ParentProductCategoryID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ParentProductCategoryID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Name",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Name",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "Guid"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "ProductDescription"
								},
								"destination": {
									"table": "ProductDescription"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ProductDescriptionID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductDescriptionID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Description",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Description",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "Guid"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "ProductModel"
								},
								"destination": {
									"table": "ProductModel"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ProductModelID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductModelID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Name",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Name",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "CatalogDescription",
													"type": "String",
													"physicalType": "xml"
												},
												"sink": {
													"name": "CatalogDescription",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "Guid"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "ProductModelProductDescription"
								},
								"destination": {
									"table": "ProductModelProductDescription"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ProductModelID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductModelID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "ProductDescriptionID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductDescriptionID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Culture",
													"type": "String",
													"physicalType": "nchar"
												},
												"sink": {
													"name": "Culture",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "Guid"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "SalesOrderDetail"
								},
								"destination": {
									"table": "SalesOrderDetail"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "LineTotal",
													"type": "Decimal",
													"physicalType": "numeric"
												},
												"sink": {
													"name": "LineTotal",
													"type": "Decimal"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "Guid"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime"
												}
											},
											{
												"source": {
													"name": "SalesOrderID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "SalesOrderID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "SalesOrderDetailID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "SalesOrderDetailID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "OrderQty",
													"type": "Int16",
													"physicalType": "smallint"
												},
												"sink": {
													"name": "OrderQty",
													"type": "Int16"
												}
											},
											{
												"source": {
													"name": "ProductID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ProductID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "UnitPrice",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "UnitPrice",
													"type": "Decimal"
												}
											},
											{
												"source": {
													"name": "UnitPriceDiscount",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "UnitPriceDiscount",
													"type": "Decimal"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "SalesOrderHeader"
								},
								"destination": {
									"table": "SalesOrderHeader"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "SalesOrderID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "SalesOrderID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "RevisionNumber",
													"type": "Byte",
													"physicalType": "tinyint"
												},
												"sink": {
													"name": "RevisionNumber",
													"type": "Byte"
												}
											},
											{
												"source": {
													"name": "OrderDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "OrderDate",
													"type": "DateTime"
												}
											},
											{
												"source": {
													"name": "DueDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "DueDate",
													"type": "DateTime"
												}
											},
											{
												"source": {
													"name": "ShipDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ShipDate",
													"type": "DateTime"
												}
											},
											{
												"source": {
													"name": "Status",
													"type": "Byte",
													"physicalType": "tinyint"
												},
												"sink": {
													"name": "Status",
													"type": "Byte"
												}
											},
											{
												"source": {
													"name": "TotalDue",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "TotalDue",
													"type": "Decimal"
												}
											},
											{
												"source": {
													"name": "Comment",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "Comment",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "rowguid",
													"type": "Guid",
													"physicalType": "uniqueidentifier"
												},
												"sink": {
													"name": "rowguid",
													"type": "Guid"
												}
											},
											{
												"source": {
													"name": "ModifiedDate",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "ModifiedDate",
													"type": "DateTime"
												}
											},
											{
												"source": {
													"name": "BillToAddressID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "BillToAddressID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "ShipMethod",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "ShipMethod",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "CreditCardApprovalCode",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "CreditCardApprovalCode",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "SubTotal",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "SubTotal",
													"type": "Decimal"
												}
											},
											{
												"source": {
													"name": "TaxAmt",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "TaxAmt",
													"type": "Decimal"
												}
											},
											{
												"source": {
													"name": "Freight",
													"type": "Decimal",
													"physicalType": "money"
												},
												"sink": {
													"name": "Freight",
													"type": "Decimal"
												}
											},
											{
												"source": {
													"name": "OnlineOrderFlag",
													"type": "Boolean",
													"physicalType": "bit"
												},
												"sink": {
													"name": "OnlineOrderFlag",
													"type": "Boolean"
												}
											},
											{
												"source": {
													"name": "SalesOrderNumber",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "SalesOrderNumber",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "PurchaseOrderNumber",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "PurchaseOrderNumber",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "AccountNumber",
													"type": "String",
													"physicalType": "nvarchar"
												},
												"sink": {
													"name": "AccountNumber",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "CustomerID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "CustomerID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "ShipToAddressID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ShipToAddressID",
													"type": "Int32"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_Accounts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_y74",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "data//CSU South Consumption Plays.xlsx"
							},
							{
								"name": "Destination",
								"value": "dbo.csuaccounts"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "TPID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TPID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AccountName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Industry",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Industry",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Vertical",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Vertical",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "VerticalCategory",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "VerticalCategory",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "State",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "State",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SegmentGroup",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SegmentGroup",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SubSegment",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubSegment",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Segment",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Segment",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SalesGroup",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SalesGroup",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SalesUnit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SalesUnit",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ATUGroup",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ATUGroup",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ATU",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ATU",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ATU FY21",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ATU FY21",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sales Territory",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales Territory",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sales Territory FY21",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales Territory FY21",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ATUM",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ATUM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ATUM FY21",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ATUM FY21",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AE FY21",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AE FY21",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AE Change FY22",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AE Change FY22",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Infra SSP",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Infra SSP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Infra SSP FY21",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Infra SSP FY21",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Infra Change FY22",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Infra Change FY22",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "D&AI SSP",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "D&AI SSP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "D&AI SSP FY21",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "D&AI SSP FY21",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DAI Change FY22",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DAI Change FY22",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "App Dev",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "App Dev",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "App Dev FY21",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "App Dev FY21",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "App Dev Change FY22",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "App Dev Change FY22",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SAP SSP",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SAP SSP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Hunter",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Hunter",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Hunter FY21",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Hunter FY21",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "App Dev Change FY222",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "App Dev Change FY222",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_y74",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_y74",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_plays')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_vxm",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "data//CSU South Consumption Plays.xlsx"
							},
							{
								"name": "Destination",
								"value": "dbo.csuplays"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CP Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CP Name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TPID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TPID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Top Parent",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Top Parent",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "STB Mid Segment",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "STB Mid Segment",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Area",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Area",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Industry",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Industry",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EOU",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EOU",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "M2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "M2",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Potential ACR$",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Potential ACR"
										}
									},
									{
										"source": {
											"name": "M1 Assigned",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "M1 Assigned",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CSA Assigned",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CSA Assigned",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Status (Accept/Reject)",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Status"
										}
									},
									{
										"source": {
											"name": "Comment/Reason if Rejected",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Comment"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_vxm",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_vxm",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_z0a')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_z0a",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "raw//hciMastIncdntv6_hciMasterIncideObject_1900-01-01_2018-12-31.json"
							},
							{
								"name": "Destination",
								"value": "dbo.jsontest"
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_z0a",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_z0a",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Archive"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyTablesToParquetFull')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get-Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM dbo.DataFactoryMeta WHERE active = 1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlGeneric",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy-Each-Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-Tables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RowcountGreaterThanOne",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "RowCount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('RowCount').output.count",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Error",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "error",
													"value": {
														"value": "1234",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy-Table",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{item().TableName}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "AzureSqlGeneric",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "AzureDataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"filename": {
																"value": "@{item().TableName}",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "RowCount",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "SELECT TOP 10 [PersonID]\n      ,[Name]\n      ,[LastModifytime]\n  FROM [dbo].[data_source_table]\n  ORDER BY LastModifytime DESC",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabaseDataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"error": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Car"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencyConverter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Currency Converter1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CurrencyConverter",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"USDCurrency": {},
									"CADSource": {},
									"USDSink": {},
									"CADSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Flow Demos"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DateFixerPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DB2DateFixer",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DB2DateFixer",
								"type": "DataFlowReference",
								"parameters": {
									"OutputFileName": "'SYSTEM_SIGN_ON.DAT'"
								},
								"datasetParameters": {
									"AzureBlobDB2Source": {
										"filename": "SYSTEM_SIGN_ON.DAT",
										"container": "test"
									},
									"AzureBlobDB2DateFixed": {
										"container": "testdb2fixed"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Shipping"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dedupe Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Deduplication Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dedupeProb",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceName": {},
									"sinkDupes": {},
									"sinkNoDupes": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Flow Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dedupeProb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fixed Width Data Flow Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is an example of creating a data flow to process fixed-width text files",
				"activities": [
					{
						"name": "fixedwidth",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FixedWidth",
								"type": "DataFlowReference",
								"parameters": {
									"Field1": "'1,7'",
									"Field2": "'8,8'",
									"Field3": "'15,10'",
									"Field4": "'25,11'",
									"Field5": "'36,10'",
									"Field6": "'46,12'",
									"Field7": "'58,1'"
								},
								"datasetParameters": {
									"fixedsource1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GedFredData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRequestBodyUrls",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATASET, QUERY FROM dbo.FED \nwhere [TYPE] = 'RequestBody'",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TriggerCopy",
						"description": "Copy FRED data from lookup list, calling child copy pipeline.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetRequestBodyUrls",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "GetBaseUrl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "IterateAndCopyFredExports",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"RequestBodyUrlList": {
									"value": "@activity('GetRequestBodyUrls').output",
									"type": "Expression"
								},
								"BaseUrl": {
									"value": "@activity('GetBaseUrl').output",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetBaseUrl",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select DATASET, QUERY from dbo.fed where TYPE = 'BaseUrl'",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Copy Demos/Federal Reserve Open Datasets"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetTableListAndTriggerCopyData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupTableList",
						"description": "Retrieve the table list from Azure SQL database",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT TABLE_SCHEMA, TABLE_NAME FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' and TABLE_SCHEMA = 'SalesLT' and TABLE_NAME <> 'ProductModel'",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TriggerCopy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LookupTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "IterateAndCopySQLTables",
								"type": "PipelineReference"
							},
							"parameters": {
								"tableList": {
									"value": "@activity('LookupTableList').output.value",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Copy Demos"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IngestSTLFED')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Run dataflow with Explicit copy to ingest copy source",
				"activities": [
					{
						"name": "LoadSTLPCPI",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATE",
											"type": "DateTime"
										},
										"sink": {
											"name": "DATE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "STLPCPI_20171116",
											"type": "String"
										},
										"sink": {
											"name": "STLPCPI_20171116",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "STLPCPI_20181115",
											"type": "String"
										},
										"sink": {
											"name": "STLPCPI_20181115",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "PerCapIncomeSTLSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "StagingParquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "STLFED",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "LoadSTLPCPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "STLFED",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STLPCPI": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "DFIR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Copy Demos/Federal Reserve Open Datasets"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/STLFED')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_qkw_BottomLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
				"activities": [
					{
						"name": "ListObjectsFromOneGroup",
						"description": "List objects from one group and iterate each of them to downstream activities",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ObjectsPerGroupToCopy",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnLoadingBehavior",
									"description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load via watermark column to identify changes.",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "FullLoad",
												"activities": [
													{
														"name": "FullLoadOneObject",
														"description": "Take a full snapshot on this object and copy it to the destination",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).container}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "@json(item().CopySourceSettings).sqlReaderQuery",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_qkw_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_qkw_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_compressionCodec": {
																		"value": "@json(item().SinkObjectSettings).compressionCodec",
																		"type": "Expression"
																	},
																	"cw_fileName": {
																		"value": "@json(item().SinkObjectSettings).fileName",
																		"type": "Expression"
																	},
																	"cw_folderPath": {
																		"value": "@json(item().SinkObjectSettings).folderPath",
																		"type": "Expression"
																	},
																	"cw_container": {
																		"value": "@json(item().SinkObjectSettings).container",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "DeltaLoad",
												"activities": [
													{
														"name": "GetMaxWatermarkValue",
														"description": "Query the source object to get the max value from watermark column",
														"type": "Lookup",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "select max(@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}) as CurrentMaxWaterMarkColumnValue from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}]",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"dataset": {
																"referenceName": "MetadataDrivenCopyTask_qkw_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														}
													},
													{
														"name": "SetWatermarkValueQuoteChar",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "GetMaxWatermarkValue",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "WatermarkValueQuoteChar",
															"value": {
																"value": "@if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'), '','''')",
																"type": "Expression"
															}
														}
													},
													{
														"name": "DeltaLoadOneObject",
														"description": "Copy the changed data only from last time via comparing the value in watermark column to identify changes.",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "SetWatermarkValueQuoteChar",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).container}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "select * from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}]\n                    where @{json(item().DataLoadingBehaviorSettings).watermarkColumnName}\n                    > @{variables('WatermarkValueQuoteChar')}@{json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue}@{variables('WatermarkValueQuoteChar')}\n                    and @{json(item().DataLoadingBehaviorSettings).watermarkColumnName}\n                    <= @{variables('WatermarkValueQuoteChar')}@{activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue}@{variables('WatermarkValueQuoteChar')}",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_qkw_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_qkw_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_compressionCodec": {
																		"value": "@json(item().SinkObjectSettings).compressionCodec",
																		"type": "Expression"
																	},
																	"cw_fileName": {
																		"value": "@{json(item().SinkObjectSettings).fileName}-@{json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue}-@{activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue}",
																		"type": "Expression"
																	},
																	"cw_folderPath": {
																		"value": "@json(item().SinkObjectSettings).folderPath",
																		"type": "Expression"
																	},
																	"cw_container": {
																		"value": "@json(item().SinkObjectSettings).container",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "UpdateWatermarkColumnValue",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "DeltaLoadOneObject",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[dbo].[UpdateWatermarkColumnValue_qkw]",
															"storedProcedureParameters": {
																"Id": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"watermarkColumnStartValue": {
																	"value": {
																		"value": "@activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "AdventureWorks",
															"type": "LinkedServiceReference"
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "DefaultFullLoadOneObject",
												"description": "Take a full snapshot on this object and copy it to the destination",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
													},
													{
														"name": "Destination",
														"value": "@{json(item().SinkObjectSettings).container}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@json(item().CopySourceSettings).sqlReaderQuery",
															"type": "Expression"
														},
														"partitionOption": {
															"value": "@json(item().CopySourceSettings).partitionOption",
															"type": "Expression"
														},
														"partitionSettings": {
															"partitionColumnName": {
																"value": "@json(item().CopySourceSettings).partitionColumnName",
																"type": "Expression"
															},
															"partitionUpperBound": {
																"value": "@json(item().CopySourceSettings).partitionUpperBound",
																"type": "Expression"
															},
															"partitionLowerBound": {
																"value": "@json(item().CopySourceSettings).partitionLowerBound",
																"type": "Expression"
															},
															"partitionNames": "@json(item().CopySourceSettings).partitionNames"
														}
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false,
													"translator": {
														"value": "@json(item().CopyActivitySettings).translator",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_qkw_SourceDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_schema": {
																"value": "@json(item().SourceObjectSettings).schema",
																"type": "Expression"
															},
															"cw_table": {
																"value": "@json(item().SourceObjectSettings).table",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_qkw_DestinationDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_compressionCodec": {
																"value": "@json(item().SinkObjectSettings).compressionCodec",
																"type": "Expression"
															},
															"cw_fileName": {
																"value": "@json(item().SinkObjectSettings).fileName",
																"type": "Expression"
															},
															"cw_folderPath": {
																"value": "@json(item().SinkObjectSettings).folderPath",
																"type": "Expression"
															},
															"cw_container": {
																"value": "@json(item().SinkObjectSettings).container",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ObjectsPerGroupToCopy": {
						"type": "Array"
					}
				},
				"variables": {
					"WatermarkValueQuoteChar": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_qkw_20211027"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrchestrateDataLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePrepare",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PrepareGlobalTempTable",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					},
					{
						"name": "ExecuteCopy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePrepare",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyAndMerge",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CopyAndMerge"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SearchLogAnalytics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a sample that takes the U-SQL SearchLog analytics example and turns it into an ADF Data Flow: https://kromerbigdata.com/2019/03/03/u-sql-searchlog-aggregations-as-adf-data-flows/",
				"activities": [
					{
						"name": "SearchLog",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SearchLog",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"searchLog": {},
									"sinkIntoDW": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Flow Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SearchLog')]"
			]
		}
	]
}